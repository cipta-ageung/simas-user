// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth.proto

package auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/infobloxopen/atlas-app-toolkit/query"
	_ "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "google.golang.org/genproto/protobuf/field_mask"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthService service

type AuthService interface {
	Create(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	Read(ctx context.Context, in *ReadUserRequest, opts ...client.CallOption) (*ReadUserResponse, error)
	Update(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error)
	UpdateSet(ctx context.Context, in *UpdateSetUserRequest, opts ...client.CallOption) (*UpdateSetUserResponse, error)
	List(ctx context.Context, in *ListUserRequest, opts ...client.CallOption) (*ListUserResponse, error)
	Delete(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
	CustomMethod(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error)
	Auth(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error)
	ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "auth"
	}
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) Create(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Create", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Read(ctx context.Context, in *ReadUserRequest, opts ...client.CallOption) (*ReadUserResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Read", in)
	out := new(ReadUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Update(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Update", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) UpdateSet(ctx context.Context, in *UpdateSetUserRequest, opts ...client.CallOption) (*UpdateSetUserResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.UpdateSet", in)
	out := new(UpdateSetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) List(ctx context.Context, in *ListUserRequest, opts ...client.CallOption) (*ListUserResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.List", in)
	out := new(ListUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Delete(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Delete", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CustomMethod(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "AuthService.CustomMethod", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Auth(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "AuthService.Auth", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "AuthService.ValidateToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	Create(context.Context, *CreateUserRequest, *CreateUserResponse) error
	Read(context.Context, *ReadUserRequest, *ReadUserResponse) error
	Update(context.Context, *UpdateUserRequest, *UpdateUserResponse) error
	UpdateSet(context.Context, *UpdateSetUserRequest, *UpdateSetUserResponse) error
	List(context.Context, *ListUserRequest, *ListUserResponse) error
	Delete(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
	CustomMethod(context.Context, *empty.Empty, *empty.Empty) error
	Auth(context.Context, *User, *Token) error
	ValidateToken(context.Context, *Token, *Token) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		Create(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		Read(ctx context.Context, in *ReadUserRequest, out *ReadUserResponse) error
		Update(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error
		UpdateSet(ctx context.Context, in *UpdateSetUserRequest, out *UpdateSetUserResponse) error
		List(ctx context.Context, in *ListUserRequest, out *ListUserResponse) error
		Delete(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error
		CustomMethod(ctx context.Context, in *empty.Empty, out *empty.Empty) error
		Auth(ctx context.Context, in *User, out *Token) error
		ValidateToken(ctx context.Context, in *Token, out *Token) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) Create(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.AuthServiceHandler.Create(ctx, in, out)
}

func (h *authServiceHandler) Read(ctx context.Context, in *ReadUserRequest, out *ReadUserResponse) error {
	return h.AuthServiceHandler.Read(ctx, in, out)
}

func (h *authServiceHandler) Update(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error {
	return h.AuthServiceHandler.Update(ctx, in, out)
}

func (h *authServiceHandler) UpdateSet(ctx context.Context, in *UpdateSetUserRequest, out *UpdateSetUserResponse) error {
	return h.AuthServiceHandler.UpdateSet(ctx, in, out)
}

func (h *authServiceHandler) List(ctx context.Context, in *ListUserRequest, out *ListUserResponse) error {
	return h.AuthServiceHandler.List(ctx, in, out)
}

func (h *authServiceHandler) Delete(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.AuthServiceHandler.Delete(ctx, in, out)
}

func (h *authServiceHandler) CustomMethod(ctx context.Context, in *empty.Empty, out *empty.Empty) error {
	return h.AuthServiceHandler.CustomMethod(ctx, in, out)
}

func (h *authServiceHandler) Auth(ctx context.Context, in *User, out *Token) error {
	return h.AuthServiceHandler.Auth(ctx, in, out)
}

func (h *authServiceHandler) ValidateToken(ctx context.Context, in *Token, out *Token) error {
	return h.AuthServiceHandler.ValidateToken(ctx, in, out)
}
